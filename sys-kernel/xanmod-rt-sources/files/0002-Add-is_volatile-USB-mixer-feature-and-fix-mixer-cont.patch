From 91702c3696ae7ac0d8c40bf708f3c22f2250083b Mon Sep 17 00:00:00 2001
From: Jussi Laako <jussi@sonarnerd.net>
Date: Fri, 21 Sep 2018 10:37:01 +0300
Subject: [PATCH 2/4] Add is_volatile USB mixer feature and fix mixer control
 creation

---
 sound/usb/mixer.c        | 14 +++++++++-----
 sound/usb/mixer.h        |  1 +
 sound/usb/mixer_quirks.c | 12 ++++++++----
 3 files changed, 18 insertions(+), 9 deletions(-)

diff --git a/sound/usb/mixer.c b/sound/usb/mixer.c
index 567514832b0d..4740f1347375 100644
--- a/sound/usb/mixer.c
+++ b/sound/usb/mixer.c
@@ -434,7 +434,7 @@ int snd_usb_get_cur_mix_value(struct usb_mixer_elem_info *cval,
 {
 	int err;
 
-	if (cval->cached & (1 << channel)) {
+	if ((cval->cached & (1 << channel)) && !cval->is_volatile) {
 		*value = cval->cache_val[index];
 		return 0;
 	}
@@ -446,8 +446,10 @@ int snd_usb_get_cur_mix_value(struct usb_mixer_elem_info *cval,
 				      cval->control, channel, err);
 		return err;
 	}
-	cval->cached |= 1 << channel;
-	cval->cache_val[index] = *value;
+	if (!cval->is_volatile) {
+		cval->cached |= 1 << channel;
+		cval->cache_val[index] = *value;
+	}
 	return 0;
 }
 
@@ -537,8 +539,10 @@ int snd_usb_set_cur_mix_value(struct usb_mixer_elem_info *cval, int channel,
 					  value);
 	if (err < 0)
 		return err;
-	cval->cached |= 1 << channel;
-	cval->cache_val[index] = value;
+	if (!cval->is_volatile) {
+		cval->cached |= 1 << channel;
+		cval->cache_val[index] = value;
+	}
 	return 0;
 }
 
diff --git a/sound/usb/mixer.h b/sound/usb/mixer.h
index 98ea24d91d80..6c6c29e8b0c6 100644
--- a/sound/usb/mixer.h
+++ b/sound/usb/mixer.h
@@ -89,6 +89,7 @@ struct usb_mixer_elem_info {
 	int val_type;
 	int min, max, res;
 	int dBmin, dBmax;
+	bool is_volatile;
 	int cached;
 	int cache_val[MAX_CHANNELS];
 	u8 initialized;
diff --git a/sound/usb/mixer_quirks.c b/sound/usb/mixer_quirks.c
index d12b87e52d22..4300a275e60e 100644
--- a/sound/usb/mixer_quirks.c
+++ b/sound/usb/mixer_quirks.c
@@ -141,20 +141,24 @@ static int add_single_ctl_with_resume(struct usb_mixer_interface *mixer,
 				      const struct snd_kcontrol_new *knew,
 				      struct usb_mixer_elem_list **listp)
 {
+	struct usb_mixer_elem_info *cval;
 	struct usb_mixer_elem_list *list;
 	struct snd_kcontrol *kctl;
 
-	list = kzalloc(sizeof(*list), GFP_KERNEL);
-	if (!list)
+	cval = kzalloc(sizeof(*cval), GFP_KERNEL);
+	if (!cval)
 		return -ENOMEM;
+	list = &cval->head;
 	if (listp)
 		*listp = list;
+	if (knew->access & SNDRV_CTL_ELEM_ACCESS_VOLATILE)
+		cval->is_volatile = 1;
 	list->mixer = mixer;
 	list->id = id;
 	list->resume = resume;
-	kctl = snd_ctl_new1(knew, list);
+	kctl = snd_ctl_new1(knew, cval);
 	if (!kctl) {
-		kfree(list);
+		kfree(cval);
 		return -ENOMEM;
 	}
 	kctl->private_free = snd_usb_mixer_elem_free;
-- 
2.25.1

