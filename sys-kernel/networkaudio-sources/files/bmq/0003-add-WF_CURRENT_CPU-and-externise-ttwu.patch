diff -urpN linux/kernel/sched/alt_core.c bmq-b/kernel/sched/alt_core.c
--- linux/kernel/sched/alt_core.c	2024-01-29 14:59:10.308830713 +0800
+++ bmq-b/kernel/sched/alt_core.c	2024-01-29 15:11:44.329108097 +0800
@@ -2978,7 +2978,11 @@ int try_to_wake_up(struct task_struct *p
 
 		sched_task_ttwu(p);
 
-		cpu = select_task_rq(p);
+		//cpu = select_task_rq(p);
+		if ((wake_flags & WF_CURRENT_CPU) && cpumask_test_cpu(smp_processor_id(), p->cpus_ptr))
+			cpu = smp_processor_id();
+		else
+			cpu = select_task_rq(p);
 
 		if (task_cpu(p) != cpu) {
 			if (p->in_iowait) {
diff -urpN linux/kernel/sched/alt_sched.h bmq-b/kernel/sched/alt_sched.h
--- linux/kernel/sched/alt_sched.h	2024-01-29 14:59:10.308830713 +0800
+++ bmq-b/kernel/sched/alt_sched.h	2024-01-29 15:13:28.241478411 +0800
@@ -117,11 +117,26 @@ static inline int task_on_rq_migrating(s
 /*
  * wake flags
  */
+//#define WF_FORK         0x04 /* Wakeup after fork; maps to SD_BALANCE_FORK */
+//#define WF_SYNC         0x10 /* Waker goes to sleep after wakeup */
+//#define WF_MIGRATED     0x20 /* Internal use, task got migrated */
+//#define WF_CURRENT_CPU  0x40 /* Prefer to move the wakee to the current CPU. */
+
+/* Wake flags. The first three directly map to some SD flag value */
+#define WF_EXEC         0x02 /* Wakeup after exec; maps to SD_BALANCE_EXEC */
 #define WF_FORK         0x04 /* Wakeup after fork; maps to SD_BALANCE_FORK */
+#define WF_TTWU         0x08 /* Wakeup;            maps to SD_BALANCE_WAKE */
+
 #define WF_SYNC         0x10 /* Waker goes to sleep after wakeup */
 #define WF_MIGRATED     0x20 /* Internal use, task got migrated */
 #define WF_CURRENT_CPU  0x40 /* Prefer to move the wakee to the current CPU. */
 
+#ifdef CONFIG_SMP
+static_assert(WF_EXEC == SD_BALANCE_EXEC);
+static_assert(WF_FORK == SD_BALANCE_FORK);
+static_assert(WF_TTWU == SD_BALANCE_WAKE);
+#endif
+
 #define SCHED_QUEUE_BITS	(SCHED_LEVELS - 1)
 
 struct sched_queue {
